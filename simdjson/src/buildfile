intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.
#import xxxx_libs += libhello%lib{hello}

# Public headers.
#
pub = [dir_path] ../include/

include $pub

pub_hdrs = $($pub/ pub_hdrs)

lib{simdjson}: $pub/{$pub_hdrs}

# Private headers and sources as well as dependencies.
#
lib{simdjson}: simdjson/hxx{*} simdjson/cxx{simdjson} $impl_libs $intf_libs

# Build options.
#
out_pfx_inc = [dir_path] $out_root/include/
src_pfx_inc = [dir_path] $src_root/include/
out_pfx_src = [dir_path] $out_root/src/simdjson/
src_pfx_src = [dir_path] $src_root/src/simdjson/

cxx.poptions =+ "-I$out_pfx_src" "-I$src_pfx_src" \
                "-I$out_pfx_inc" "-I$src_pfx_inc"

if($cxx.target.class == 'windows') # Why only on windows? didnt check yet but I suspect they think it's fine to expose all symbols on linux :(
{
  cxx.poptions += -DSIMDJSON_VISUAL_STUDIO
  {hbmis objs}{*}: cxx.poptions += -DSIMDJSON_BUILDING_WINDOWS_DYNAMIC_LIBRARY
  lib{simdjson}: cxx.export.poptions += -DSIMDJSON_USING_WINDOWS_DYNAMIC_LIBRARY
}

{hbmia obja}{*}: cxx.poptions += -DSIMDJSON_STATIC_BUILD
{hbmis objs}{*}: cxx.poptions += -DSIMDJSON_SHARED_BUILD

# Export options.
#
lib{simdjson}:
{
  cxx.export.poptions += "-I$out_pfx_inc" "-I$src_pfx_inc"
  cxx.export.libs = $intf_libs
}

liba{simdjson}: cxx.export.poptions += -DSIMDJSON_STATIC
libs{simdjson}: cxx.export.poptions += -DSIMDJSON_SHARED

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{simdjson}: bin.lib.version = "-$version.project_id"
else
  lib{simdjson}: bin.lib.version = "-$version.major.$version.minor"

# Don't install private headers.
#
{hxx ixx txx}{*}: install = false
